c
session[:cart_id] = nil
c
    @province = Province.find(@customer.province_id).name
    @province = Province.find_by(@customer.province_id).name
c
Province.find_by(id: current_customer.province_id).gst_ratec
Province.find_by(id: current_customer.province_id).gst_rate
Province.find(25)
Province.find(current_customer.province_id).gst_rate
current_customer.province_id
current_customer
c
current_customer
@current_customer
@current_customer.province_id
c
@current_customer
current_customer
c
@current_customer
c
link_to(category_path(data))
category_path(data)
data
c
data
c
@new_products = Product.where(product_type: params[:product_type]).where(created_at: start_date..end_date).page(params[:page]).per(20)
start_date = Date.parse((DateTime.now - 5.days).to_s).beginning_of_day
@new_products = Product.where(product_type: params[:product_type]).where(created_at: start_date..end_date).page(params[:page]).per(20)
end_date = Date.parse((DateTime.now).to_s).end_of_day
start_date = Date.parse((DateTime.now - 3.days).to_s).beginning_of_day
c
session[:cart_id] = nil
c
session[:cart_id]
c
session[:cart_id] = nil
c
session[:cart_id] = nil
session[:cart_id]
c
session[:cart_id]
c
session[:cart_id] = nil
session[:cart_id]
c
session[:cart_id]
c
session[:cart_id]
c
session[:cart_id]
c
params[:order]
params
order_params
c
@order.update(order_params)
 @order = Order.find(params[:id])
c
charge.status == "succeeded"
charge.status
charge
c
order_params[:total_amount].to_i
order_params[:total_amount]
c
@cart = current_cart
@cart
order_params
c
 intent = Stripe::PaymentIntent.retrieve("pi_3OLOzgIDKL58kVPR0xNohE0y")
intent
 intent = Stripe::PaymentIntent.retrieve("pi_3OLOzgIDKL58kVPR0xNohE0y_secret_MFR9d7b1p4pL9wsiQJlfijk3X")
 intent = Stripe::PaymentIntent.retrieve(pi_3OLOzgIDKL58kVPR0xNohE0y_secret_MFR9d7b1p4pL9wsiQJlfijk3X)
intent.client_secret
c
intent
c
params[:customer][:province_id].to_i
params[:customer][:province_id]
params[:customer]
params
@customer.errors.full_messages
a.valid?
a.erros
a =  @customer.update(customer_params)
 @customer.update(customer_params)
customer_params
 @customer = current_customer
c
@customer.update_columns(customer_params)
@customer.update_attribute(customer_params)
@customer.update_attributes(customer_params)
params
customer_params
@customer.update(customer_params)
c
@customer
@customer.province
c
end_date
start_date
start_date = Date.parse((DateTime.now - 3.days).to_s).beginning_of_day
        end_date = Date.parse((DateTime.now - 3.days).to_s).end_of_day
start_date = Date.parse((DateTime.now).to_s).beginning_of_day
        end_date = Date.parse((DateTime.now ).to_s).end_of_day
c
administrator_signed_in?
customer_signed_in?
c
customer_signed_in?
administrator_signed_in?
c
administrator_signed_in?
c
self.select(:name,:id).map { |c| [c.name, c.id] }
c
cc
c
province[:name]
province
c
provinces_data
\provinces_data
provinces_data
provinces_data.name
provinces_data["name"]
provinces_data[:name]
c
session[:cart_id] = nil
session[:cart_id]
c
cc
c
cc
c
product.thumbnail.present?
c
@product
@product.thumbnail?
c
 cart = current_customer&.cart || Cart.create
      session[:cart_id] = cart.id
      cart
Cart.find_by(id: session[:cart_id]).nil? cart = current_customer&.cart || Cart.create
      session[:cart_id] = cart.id
      cart
session[:cart_id]
c
 product = Product.find(params[:cart][:product_id])
c
current_cart
product = Product.find(params[:cart][:product_id])
c
Cart.find_by(id: session[:cart_id]).nil?
Cart.find_by(id: session[:cart_id]).present?
Cart.find_by(id: session[:cart_id])
c
session.clear
Cart.find(session[:cart_id])
session[:cart_id]
c
session[:cart_id]
c
session[:cart_id] = nil
c
Cart.create(customer_id: current_customer.id,product_id: 1,quantity: 1)
Cart.create(customer_id: current_customer.id,product_id: 1)
Cart.create(customer_id: current_customer.id)
cart = current_customer&.cart || Cart.create
current_customer&.cart
current_customer
c
current_customer
a = current_customerCart.new
Cart.create
current_item = cart_items.find_by(product: product)
c
Cart.create
cart
cart = current_customer&.cart || Cart.create
session[:cart_id]
c
session[:cart_id] = nil
c
session[:cart_id] = nil
session[:cart_id]
c
@products = Product.joins(:category).where('products.name LIKE ?', "%#{params[:query]}%").where(categories: {id: params[:category]})
@products = Product.joins(:category).where('products.name LIKE ?', "%#{params[:query]}%")
c
order_params
@order = current_customer.orders.build(order_params)
@cart = current_cart
c
order_params
@order = current_customer.orders.build(order_params)
@cart = current_cart
c
params
c
params
c
params
order_params
@order = current_customer.orders.build(order_params)
c
current_cart
c
current_customer&.cart
session[:cart_id]
c
session[:cart] = nil
session[:cart_id]
session[:cart_id] = nil
session[:cart_id]
c
fetch_cart_items
c
@order.errors
@order.save
c
params
@order.errors
@order.save
c
params
@order.errors
@order.save
@order.errors
c
@order.errors
@order.save
c
params
@order.errors
@order.save
c
@order.errors
@order.save
@order
params
c
a.valid?
a.errors
a = CartItem.new(product_id: 1, quantity: 1, cart_id: 1)
current_item = cart_items.build(product: product,quantity: 1)
c
a.errors
a.valid?
a = CartItem.new(product_id: 1, quantity: 1, cart_id: 1)
CartItem.create(product_id: 1, quantity: 1, cart_id: 1)
CartItme.create(product_id: 1, quantity: 1, cart_id: 1)
 current_item = cart_items.build(product: product,quantity: 1)
